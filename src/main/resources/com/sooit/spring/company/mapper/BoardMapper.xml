<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org//dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sooit.spring.company.mapper.BoardMapper">
	<!-- dto 단수의 경로를 적어야됨 -->
	<resultMap id="BoardPostResultMap"
		type="com.sooit.spring.company.dto.BoardPostDto">
		<result property="postId" column="post_id" />
		<result property="content" column="content" />
		<result property="title" column="title" />
		<result property="author" column="author" />
		<result property="createdAt" column="created_at" />
		<result property="viewCount" column="view_count" />
		<result property="isDeleted" column="is_deleted" />

	</resultMap>
	<!-- 단순 매핑(데이터베이스 칼럼 이름과 dto 필드 이름이 일치)일 때 사용 -->
	<!-- <select id="getList" resultType="com.sooit.spring.company.dto.BoardPostDto"> -->
	<!-- 복잡한 매핑(예: snake_case-> camelCase, 조인 결과 매핑 등)을 처리하기 위해 사용 -->

	<!-- <select id="getList" resultMap="BoardPostResultMap"> -->
	<!-- SELECT * from company_board_posts limit #{limitIndex}, 5 -->
	<!-- </select> -->
	<select id="getList" resultMap="BoardPostResultMap">
		SELECT * from company_board_posts WHERE is_deleted = FALSE LIMIT
		#{limitIndex}, 5
		<!-- SELECT * from company_board_posts WHERE is_deleted IN (FALSE, TRUE) 
			ORDER BY post_id DESC LIMIT #{limitIndex}, 5 -->
	</select>
	<select id="read" resultMap="BoardPostResultMap">
		<!-- <select id="read" resultType="com.sooit.spring.company.dto.BoardPostDto"> -->
		<!-- SELECT * from company_board_posts where post_id = #{post_id} -->
		<!-- SELECT * from company_board_posts where post_id = #{postId} -->
		SELECT * FROM company_board_posts WHERE post_id = #{postId} AND
		is_deleted = FALSE
	</select>

	<!-- 게시물 개수 조회 -->
	<select id="getCount" resultType="int">
		SELECT count(*) from
		company_board_posts
	</select>

	<!-- 검색어로 게시물 개수 조회 -->
	<!-- <select id="getCountSearch" resultType="int"> -->
	<!-- SELECT count(*) from company_board_posts WHERE title like -->
	<!-- CONCAT('%',#{word},'%') -->
	<!-- </select> -->
	<select id="getCountSearch" resultType="int">
		<!-- SELECT count(*) from -->
		<!-- company_board_posts WHERE ${type} like -->
		<!-- CONCAT('%',#{word},'%') AND -->
		<!-- is_deleted = FALSE -->
		
		SELECT count(*) FROM company_board_posts 
		WHERE is_deleted = FALSE
		<choose>
		<when test="type == 'title'">
			AND title LIKE CONCAT('%', #{word}, '%')
		</when>
		<when test="type == 'content'">
			AND content LIKE CONCAT('%', #{word}, '%')
		</when>
		<when test="type == 'author'">
			AND author LIKE CONCAT('%', #{word}, '%')
		</when>
		<when test="type == 'total'">
		AND (title LIKE CONCAT('%', #{word}, '%')
		OR content LIKE CONCAT('%', #{word}, '%')
		OR author LIKE CONCAT('%', #{word}, '%'))
		</when>
		<otherwise>
			 <!-- 기본값: 조건 없음 -->
		</otherwise>
		</choose>
	</select>

	<!-- 검색어로 게시물 조회 -->
	<!-- <select id="getListSearch" -->
	<!-- resultType="com.sooit.spring.company.dto.BoardPostDto"> -->
	<!-- SELECT * from company_board_posts WHERE title like CONCAT('%',#{word},'%') -->
	<!-- LIMIT #{limitIndex}, 5 -->
	<!-- </select> -->

	<!-- type으로 검색어 게시물 조회 -->
	<select id="getListSearch"
		resultMap="BoardPostResultMap">
		<!-- SELECT * -->
		<!-- FROM company_board_posts -->
		<!-- WHERE ${type} LIKE CONCAT('%', #{word}, '%') -->
		<!-- AND is_deleted = FALSE -->
		<!-- ORDER BY post_id DESC -->
		<!-- LIMIT #{limitIndex}, 5 -->

		SELECT *
		FROM company_board_posts
		WHERE is_deleted = FALSE
		<if test="word != null and word != ''">
			<choose>
				<when test="type == 'title'">
					AND title LIKE CONCAT('%', #{word}, '%')
				</when>
				<when test="type == 'content'">
					AND content LIKE CONCAT('%', #{word}, '%')
				</when>
				<when test="type == 'author'">
					AND author LIKE CONCAT('%', #{word}, '%')
				</when>
				<when test="type == 'total'">
				AND (title LIKE CONCAT('%', #{word}, '%')
				OR content LIKE CONCAT('%', #{word}, '%')
				OR author LIKE CONCAT('%', #{word}, '%'))
				</when>
				<otherwise>
<!-- 					기본값: 조건 없음 -->
				</otherwise>
			</choose>
		</if>

		ORDER BY post_id DESC LIMIT #{limitIndex}, 5
	</select>

	<!-- <delete id="del" > -->
	<!-- DELETE from company_board_posts where post_id = #{post_id} -->
	<!-- DELETE from company_board_posts where post_id = #{postId} -->
	<!-- </delete> -->

	<update id="del">
		<!-- DELETE from company_board_posts where post_id = #{postId} -->
		UPDATE company_board_posts SET is_deleted = TRUE WHERE post_id =
		#{postId}
	</update>

	<update id="restore">
		<!-- UPDATE company_board_posts SET is_deleted = FALSE WHERE post_id = -->
		<!-- #{postId} -->
		<!-- UPDATE company_board_posts SET is_deleted = FALSE WHERE post_id in -->
		<!-- (1) -->
		UPDATE company_board_posts SET is_deleted = FALSE WHERE post_id IN
		<foreach collection="postIds" item="id" open="(" separator=","
			close=")">
			#{id}
		</foreach>
	</update>

	<insert id="write">
		INSERT INTO company_board_posts
		(title,content,author)
		VALUES (#{title},#{content},#{author})
	</insert>
	<!-- <update id="modify"> -->
	<!-- UPDATE company_board_posts -->
	<!-- SET -->
	<!-- title = #{title}, -->
	<!-- content = #{content}, -->
	<!-- author = #{author} -->
	<!-- WHERE post_id = #{postId} -->
	<!-- </update> -->
	<update id="modify">
		UPDATE company_board_posts
		SET
		title = #{title},
		content = #{content},
		author = #{author}
		WHERE post_id = #{postId}
	</update>
	<update id="increaseViewCount">
		UPDATE company_board_posts
		SET view_count = view_count
		+ 1
		WHERE post_id = #{postId}
	</update>
</mapper>